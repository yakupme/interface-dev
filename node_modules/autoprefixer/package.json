{
  "name": "autoprefixer",
  "version": "5.2.0",
  "description": "Parse CSS and add vendor prefixes to CSS rules using values from the Can I Use website",
  "keywords": [
    "css",
    "prefix",
    "postprocessor",
    "postcss"
  ],
  "author": {
    "name": "Andrey Sitnik",
    "email": "andrey@sitnik.ru"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/postcss/autoprefixer.git"
  },
  "dependencies": {
    "autoprefixer-core": "~5.2.0",
    "fs-extra": "~0.18.4",
    "postcss": "~4.1.11"
  },
  "devDependencies": {
    "gulp-json-editor": "2.2.1",
    "gulp-replace": "0.5.3",
    "gulp-eslint": "0.12.0",
    "gulp-mocha": "2.1.0",
    "gulp-babel": "5.1.0",
    "mocha": "2.2.5",
    "gulp": "3.8.11",
    "chai": "2.3.0",
    "babel-core": "5.4.7"
  },
  "bin": {
    "autoprefixer": "autoprefixer"
  },
  "scripts": {
    "test": "gulp"
  },
  "readme": "# Autoprefixer [![Build Status][ci-img]][ci]\n\n<img align=\"right\" width=\"94\" height=\"71\"\n     src=\"http://postcss.github.io/autoprefixer/logo.svg\"\n     title=\"Autoprefixer logo by Anton Lovchikov\">\n\n[PostCSS] plugin to parse CSS and add vendor prefixes to CSS rules using values\nfrom [Can I Use]. It is [recommended] by Google and used in Twitter,\nand Taobao.\n\nWrite your CSS rules without vendor prefixes (in fact, forget about them\nentirely):\n\n```css\n:fullscreen a {\n    display: flex\n}\n```\n\nAutoprefixer will use the data based on current browser popularity and property\nsupport to apply prefixes for you. You try in the [interactive demo]\nof Autoprefixer.\n\n```css\n:-webkit-full-screen a {\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: flex\n}\n:-moz-full-screen a {\n    display: flex\n}\n:-ms-fullscreen a {\n    display: -ms-flexbox;\n    display: flex\n}\n:fullscreen a {\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: -ms-flexbox;\n    display: flex\n}\n```\n\nTwitter account for news and releases: [@autoprefixer].\n\n<a href=\"https://evilmartians.com/?utm_source=autoprefixer\">\n<img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\" alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\">\n</a>\n\n[interactive demo]: http://simevidas.jsbin.com/gufoko/quiet\n[@autoprefixer]:    https://twitter.com/autoprefixer\n[recommended]:      https://developers.google.com/web/fundamentals/tools/build/setupbuildprocess#dont-trip-up-with-vendor-prefixes\n[Can I Use]:        http://caniuse.com/\n[PostCSS]:          https://github.com/postcss/postcss\n[ci-img]:           https://travis-ci.org/postcss/autoprefixer.svg\n[ci]:               https://travis-ci.org/postcss/autoprefixer\n\n## Features\n\n### Write Pure CSS\n\nWorking with Autoprefixer is simple: just forget about vendor prefixes\nand write normal CSS according to the latest W3C specs. You don’t need\na special language (like Sass) or remember where you must use mixins.\n\nAutoprefixer supports selectors (like `:fullscreen` and `::selection`),\nunit function (`calc()`), at‑rules (`@support` and `@keyframes`) and properties.\n\nBecause Autoprefixer is a postprocessor for CSS,\nyou can also use it with preprocessors such as Sass, Stylus or LESS.\n\n### Flexbox, Filters, etc.\n\nJust write normal CSS according to the latest W3C specs and Autoprefixer\nwill produce the code for old browsers.\n\n```css\na {\n    display: flex;\n}\n```\n\ncompiles to:\n\n```css\na {\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: -ms-flexbox;\n    display: flex\n}\n```\n\nAutoprefixer has [27 special hacks] to fix web browser differences.\n\n[27 special hacks]: https://github.com/postcss/autoprefixer-core/tree/master/lib/hacks\n\n### Only Actual Prefixes\n\nAutoprefixer utilizes the most recent data from [Can I Use]\nto add only necessary vendor prefixes.\n\nIt also removes old, unnecessary prefixes from your CSS (like `border-radius`\nprefixes, produced by many CSS libraries).\n\n```css\na {\n    -webkit-border-radius: 5px;\n            border-radius: 5px;\n}\n```\n\ncompiles to:\n\n```css\na {\n    border-radius: 5px;\n}\n```\n\n[Can I Use]: http://caniuse.com/\n\n## Browsers\n\nAutoprefixer uses [Browserslist], so you can specify the browsers\nyou want to target in your project by queries like `last 2 versions`\nor `> 5%`.\n\nIf you don’t provide browsers option, Browserslist will try\nto find `browserslist` config in parent dirs.\n\nSee [Browserslist docs] for queries, browser names, config format\nand default value.\n\n[Browserslist]:      https://github.com/ai/browserslist\n[Browserslist docs]: https://github.com/ai/browserslist#queries\n\n## Source Map\n\nAutoprefixer can modify previous source maps (for example, from Sass):\nit will autodetect a previous map if it is listed in an annotation comment.\n\nAutoprefixer supports inline source maps too. If an input CSS contains\nannotation from the previous step with a map in data:uri, Autoprefixer will\nupdate the source map with prefix changes and inline the new map back into\nthe output CSS.\n\n## Visual Cascade\n\nAutoprefixer changes CSS indentation to create a nice visual cascade\nof prefixes if the CSS is uncompressed:\n\n```css\na {\n    -webkit-box-sizing: border-box;\n       -moz-box-sizing: border-box;\n            box-sizing: border-box;\n}\n```\n\nYou can disable cascade by using the `cascade: false` option.\n\n## Outdated Prefixes\n\nBy default, Autoprefixer also removes outdated prefixes.\n\nYou can disable this behavior by `remove: false` option. If you have\nno legacy code, this options will make Autoprefixer about 10% faster.\n\nAlso you can set `add: false` option. Autoprefixer will only clean outdated\nprefixes, but will not any new prefixes.\n\nAutoprefixer adds new prefixes between unprefixed property and already\nwritten prefixes in your CSS. If it will broke expected prefixes order,\nyou can clean all prefixes from your CSS and then add necessary prefixes again:\n\n```js\nvar cleaner  = postcss([ autoprefixer({ add: false, browsers: [] }) ]);\nvar prefixer = postcss([ autoprefixer ]);\n\ncleaner.process(css).then(function (cleaned) {\n    prefixer.process(cleaned.css, function (result) {\n        console.log(result.css);\n    });\n});\n```\n\n## Disabling\n\nAutoprefixer was designed to have no interface – it just works.\nIf you need some browser specific hack just write a prefixed property\nafter the unprefixed one.\n\n```css\na {\n    transform: scale(0.5);\n    -moz-transform: scale(0.6);\n}\n```\n\nIf some prefixes were generated in a wrong way,\nplease create an issue on GitHub.\n\nBut if you do not need Autoprefixer in some part of your CSS,\nyou can use control comments to disable Autoprefixer.\n\n```css\na {\n    transition: 1s; /* it will be prefixed */\n}\n\nb {\n    /* autoprefixer: off */\n    transition: 1s; /* it will not be prefixed */\n}\n```\n\nControl comments disable Autoprefixer within the whole rule in which\nyou place it. In the above example, Autoprefixer will be disabled\nin the entire `b` rule scope, not only after the comment.\n\nYou can also use comments recursively:\n\n```css\n/* autoprefixer: off */\n@support (transition: all) {\n    /* autoprefixer: on */\n    a {\n        /* autoprefixer: off */\n    }\n}\n```\n\n## FAQ\n\n#### Does it add polyfills?\n\nNo. Autoprefixer only adds prefixes.\n\nMost new CSS features will require client side JavaScript to handle correctly\na new behavior.\n\nDepending on what you consider being a “polyfill”, you can take a look to some\nother tools and libraries. If you just look for syntax sugar, you might take\na look to:\n\n- [CSS Grace], a PostCSS plugin that handles some IE hacks (opacity, rgba,\n  inline-block, etc) in addition to some non-standard handy shortcuts.\n- [cssnext], a tool that allows you to write standard CSS syntax non-implemented\n  yet in browsers (custom properties, custom media, color functions, etc).\n  It includes autoprefixer and can be used as a PostCSS plugin too.\n\n[CSS Grace]: https://github.com/cssdream/cssgrace\n[cssnext]: https://cssnext.github.io/\n\n#### Why doesn’t Autoprefixer add prefixes to `border-radius`?\n\nDevelopers are often surprised by how few prefixes are required today.\nIf Autoprefixer doesn’t add prefixes to your CSS, check if they’re still\nrequired on [Can I Use].\n\nThere is [list with all supported] properties, values and selectors in wiki.\n\n[list with all supported]: https://github.com/postcss/autoprefixer/wiki/support-list\n[Can I Use]:               http://caniuse.com/\n\n#### Why Autoprefixer uses unprefixed properties in `@-webkit-keyframes`?\n\nBrowser teams can remove some prefix before other. So we try to use\nall combinations of prefixed/unprefixed values.\n\n#### Does Autoprefixer add `-epub-` prefix?\n\nNo, Autoprefixer works only with browsers prefixes from Can I Use.\nBut you can use [postcss-epub](https://github.com/Rycochet/postcss-epub)\nfor prefixing ePub3 properties.\n\n## Usage\n\n### Gulp\n\nIn Gulp you can use [gulp-postcss] with `autoprefixer-core` npm package.\n\n```js\ngulp.task('autoprefixer', function () {\n    var postcss      = require('gulp-postcss');\n    var sourcemaps   = require('gulp-sourcemaps');\n    var autoprefixer = require('autoprefixer-core');\n\n    return gulp.src('./src/*.css')\n        .pipe(sourcemaps.init())\n        .pipe(postcss([ autoprefixer({ browsers: ['last 2 version'] }) ]))\n        .pipe(sourcemaps.write('.'))\n        .pipe(gulp.dest('./dest'));\n});\n```\n\nWith `gulp-postcss` you also can combine Autoprefixer\nwith [other PostCSS plugins].\n\n[other PostCSS plugins]: https://github.com/postcss/postcss#plugins\n[gulp-postcss]:          https://github.com/postcss/gulp-postcss\n\n### Webpack\n\nIn [webpack] you can use [postcss-loader] with `autoprefixer-core`\nand [other PostCSS plugins].\n\n```js\nvar autoprefixer = require('autoprefixer-core');\n\nmodule.exports = {\n    module: {\n        loaders: [\n            {\n                test:   /\\.css$/,\n                loader: \"style-loader!css-loader!postcss-loader\"\n            }\n        ]\n    },\n    postcss: [ autoprefixer({ browsers: ['last 2 version'] }) ]\n}\n```\n\n[other PostCSS plugins]: https://github.com/postcss/postcss#plugins\n[postcss-loader]:        https://github.com/postcss/postcss-loader\n[webpack]:               http://webpack.github.io/\n\n### Other Build Tools:\n\n* **Ruby on Rails**: [autoprefixer-rails]\n* **Grunt**: [grunt-postcss]\n* **Brunch**: [postcss-brunch]\n* **Broccoli**: [broccoli-postcss]\n* **Middleman**: [middleman-autoprefixer]\n* **Mincer**: add `autoprefixer` npm package and enable it:\n  `environment.enable('autoprefixer')`\n* **Jekyll**: add `autoprefixer-rails` and `jekyll-assets` to `Gemfile`\n\n[middleman-autoprefixer]: https://github.com/porada/middleman-autoprefixer\n[autoprefixer-rails]:     https://github.com/ai/autoprefixer-rails\n[broccoli-postcss]:       https://github.com/jeffjewiss/broccoli-postcss\n[postcss-brunch]:         https://github.com/iamvdo/postcss-brunch\n[grunt-postcss]:          https://github.com/nDmitry/grunt-postcss\n\n### Compass\n\nYou should consider using Gulp instead of Compass binary, because it has\nbetter Autoprefixer integration and many other awesome plugins.\n\nBut if you can’t move from Compass binary right now, there’s a hack\nto run Autoprefixer after `compass compile`.\n\nInstall `autoprefixer-rails` gem:\n\n```\ngem install autoprefixer-rails\n```\n\nand add post-compile hook to `config.rb`:\n\n```ruby\nrequire 'autoprefixer-rails'\n\non_stylesheet_saved do |file|\n  css = File.read(file)\n  map = file + '.map'\n\n  if File.exists? map\n    result = AutoprefixerRails.process(css,\n      from: file,\n      to:   file,\n      map:  { prev: File.read(map), inline: false })\n    File.open(file, 'w') { |io| io << result.css }\n    File.open(map,  'w') { |io| io << result.map }\n  else\n    File.open(file, 'w') { |io| io << AutoprefixerRails.process(css) }\n  end\nend\n```\n\n### Less\n\nYou can use autoprefixer with less by including\nthe [less-plugin-autoprefix] plugin.\n\n[less-plugin-autoprefix]: https://github.com/less/less-plugin-autoprefix\n\n### Stylus\n\nIf you use Stylus CLI, you can add Autoprefixer by [autoprefixer-stylus] plugin:\n\n```\nstylus -u autoprefixer-stylus -w file.styl\n```\n\n[autoprefixer-stylus]: https://github.com/jenius/autoprefixer-stylus\n\n### CodeKit\n\nCodeKit, since the 2.0 version, contains Autoprefixer. In the After Compiling\nsection, there is a checkbox to enable Autoprefixer. Read [CodeKit docs]\nfor more information.\n\n[CodeKit docs]: https://incident57.com/codekit/help.html#autoprefixerWW\n\n### CLI\n\nYou can use the [postcss-cli] to run Autoprefixer from CLI:\n\n```sh\nnpm install --global postcss-cli autoprefixer\npostcss --use autoprefixer *.css -d build/\n```\n\nSee `postcss-cli -h` for help.\n\n[postcss-cli]: https://github.com/code42day/postcss-cli\n\n### JavaScript\n\nYou can use [autoprefixer-core] with [PostCSS] in your node.js application\nor if you want to develop an Autoprefixer plugin for new environment.\n\n```js\nvar autoprefixer = require('autoprefixer-core');\nvar postcss      = require('postcss');\n\npostcss([ autoprefixer ]).process(css).then(function (result) {\n    result.warnings().forEach(function (warn) {\n        console.warn(warn.toString());\n    });\n    console.log(result.css);\n});\n```\n\nThere is also [standalone build] for the browser or as a non-Node.js runtime.\n\nYou can use [html-autoprefixer] to process HTML with inlined CSS.\n\n[autoprefixer-core]: https://github.com/postcss/autoprefixer-core\n[html-autoprefixer]: https://github.com/RebelMail/html-autoprefixer\n[standalone build]:  https://raw.github.com/ai/autoprefixer-rails/master/vendor/autoprefixer.js\n[PostCSS]:           https://github.com/postcss/postcss\n\n### Text Editors and IDE\n\nAutoprefixer should be used in assets build tools. Text editor plugins are not\na good solution, because prefixes decrease code readability and you will need\nto change value in all prefixed properties.\n\nI recommend you to learn how to use build tools like [Gulp].\nThey work much better and will open you a whole new world of useful plugins\nand automatization.\n\nBut, if you can’t move to a build tool, you can use text editor plugins:\n\n* [Sublime Text](https://github.com/sindresorhus/sublime-autoprefixer)\n* [Brackets](https://github.com/mikaeljorhult/brackets-autoprefixer)\n* [Atom Editor](https://github.com/sindresorhus/atom-autoprefixer)\n* [Visual Studio](http://vswebessentials.com/)\n\n[Gulp]:  http://gulpjs.com/\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/postcss/autoprefixer/issues"
  },
  "homepage": "https://github.com/postcss/autoprefixer",
  "_id": "autoprefixer@5.2.0",
  "_from": "autoprefixer@^5.0.0"
}
